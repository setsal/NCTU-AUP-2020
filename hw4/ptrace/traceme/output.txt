
traceme      檔案格式 elf64-x86-64


.init 區段的反組譯：

00000000000005f0 <_init>:
 5f0:	48 83 ec 08          	sub    rsp,0x8
 5f4:	48 8b 05 ed 09 20 00 	mov    rax,QWORD PTR [rip+0x2009ed]        # 200fe8 <__gmon_start__>
 5fb:	48 85 c0             	test   rax,rax
 5fe:	74 02                	je     602 <_init+0x12>
 600:	ff d0                	call   rax
 602:	48 83 c4 08          	add    rsp,0x8
 606:	c3                   	ret    

.plt 區段的反組譯：

0000000000000610 <.plt>:
 610:	ff 35 8a 09 20 00    	push   QWORD PTR [rip+0x20098a]        # 200fa0 <_GLOBAL_OFFSET_TABLE_+0x8>
 616:	ff 25 8c 09 20 00    	jmp    QWORD PTR [rip+0x20098c]        # 200fa8 <_GLOBAL_OFFSET_TABLE_+0x10>
 61c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000000620 <raise@plt>:
 620:	ff 25 8a 09 20 00    	jmp    QWORD PTR [rip+0x20098a]        # 200fb0 <raise@GLIBC_2.2.5>
 626:	68 00 00 00 00       	push   0x0
 62b:	e9 e0 ff ff ff       	jmp    610 <.plt>

0000000000000630 <puts@plt>:
 630:	ff 25 82 09 20 00    	jmp    QWORD PTR [rip+0x200982]        # 200fb8 <puts@GLIBC_2.2.5>
 636:	68 01 00 00 00       	push   0x1
 63b:	e9 d0 ff ff ff       	jmp    610 <.plt>

0000000000000640 <__stack_chk_fail@plt>:
 640:	ff 25 7a 09 20 00    	jmp    QWORD PTR [rip+0x20097a]        # 200fc0 <__stack_chk_fail@GLIBC_2.4>
 646:	68 02 00 00 00       	push   0x2
 64b:	e9 c0 ff ff ff       	jmp    610 <.plt>

0000000000000650 <signal@plt>:
 650:	ff 25 72 09 20 00    	jmp    QWORD PTR [rip+0x200972]        # 200fc8 <signal@GLIBC_2.2.5>
 656:	68 03 00 00 00       	push   0x3
 65b:	e9 b0 ff ff ff       	jmp    610 <.plt>

0000000000000660 <exit@plt>:
 660:	ff 25 6a 09 20 00    	jmp    QWORD PTR [rip+0x20096a]        # 200fd0 <exit@GLIBC_2.2.5>
 666:	68 04 00 00 00       	push   0x4
 66b:	e9 a0 ff ff ff       	jmp    610 <.plt>

.plt.got 區段的反組譯：

0000000000000670 <__cxa_finalize@plt>:
 670:	ff 25 82 09 20 00    	jmp    QWORD PTR [rip+0x200982]        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 676:	66 90                	xchg   ax,ax

.text 區段的反組譯：

0000000000000680 <_start>:
 680:	31 ed                	xor    ebp,ebp
 682:	49 89 d1             	mov    r9,rdx
 685:	5e                   	pop    rsi
 686:	48 89 e2             	mov    rdx,rsp
 689:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
 68d:	50                   	push   rax
 68e:	54                   	push   rsp
 68f:	4c 8d 05 ba 02 00 00 	lea    r8,[rip+0x2ba]        # 950 <__libc_csu_fini>
 696:	48 8d 0d 43 02 00 00 	lea    rcx,[rip+0x243]        # 8e0 <__libc_csu_init>
 69d:	48 8d 3d 80 01 00 00 	lea    rdi,[rip+0x180]        # 824 <main>
 6a4:	ff 15 36 09 20 00    	call   QWORD PTR [rip+0x200936]        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 6aa:	f4                   	hlt    
 6ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000006b0 <deregister_tm_clones>:
 6b0:	48 8d 3d 99 14 20 00 	lea    rdi,[rip+0x201499]        # 201b50 <__TMC_END__>
 6b7:	55                   	push   rbp
 6b8:	48 8d 05 91 14 20 00 	lea    rax,[rip+0x201491]        # 201b50 <__TMC_END__>
 6bf:	48 39 f8             	cmp    rax,rdi
 6c2:	48 89 e5             	mov    rbp,rsp
 6c5:	74 19                	je     6e0 <deregister_tm_clones+0x30>
 6c7:	48 8b 05 0a 09 20 00 	mov    rax,QWORD PTR [rip+0x20090a]        # 200fd8 <_ITM_deregisterTMCloneTable>
 6ce:	48 85 c0             	test   rax,rax
 6d1:	74 0d                	je     6e0 <deregister_tm_clones+0x30>
 6d3:	5d                   	pop    rbp
 6d4:	ff e0                	jmp    rax
 6d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 6dd:	00 00 00 
 6e0:	5d                   	pop    rbp
 6e1:	c3                   	ret    
 6e2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 6e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 6ed:	00 00 00 

00000000000006f0 <register_tm_clones>:
 6f0:	48 8d 3d 59 14 20 00 	lea    rdi,[rip+0x201459]        # 201b50 <__TMC_END__>
 6f7:	48 8d 35 52 14 20 00 	lea    rsi,[rip+0x201452]        # 201b50 <__TMC_END__>
 6fe:	55                   	push   rbp
 6ff:	48 29 fe             	sub    rsi,rdi
 702:	48 89 e5             	mov    rbp,rsp
 705:	48 c1 fe 03          	sar    rsi,0x3
 709:	48 89 f0             	mov    rax,rsi
 70c:	48 c1 e8 3f          	shr    rax,0x3f
 710:	48 01 c6             	add    rsi,rax
 713:	48 d1 fe             	sar    rsi,1
 716:	74 18                	je     730 <register_tm_clones+0x40>
 718:	48 8b 05 d1 08 20 00 	mov    rax,QWORD PTR [rip+0x2008d1]        # 200ff0 <_ITM_registerTMCloneTable>
 71f:	48 85 c0             	test   rax,rax
 722:	74 0c                	je     730 <register_tm_clones+0x40>
 724:	5d                   	pop    rbp
 725:	ff e0                	jmp    rax
 727:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 72e:	00 00 
 730:	5d                   	pop    rbp
 731:	c3                   	ret    
 732:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 736:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 73d:	00 00 00 

0000000000000740 <__do_global_dtors_aux>:
 740:	80 3d 19 14 20 00 00 	cmp    BYTE PTR [rip+0x201419],0x0        # 201b60 <completed.7697>
 747:	75 2f                	jne    778 <__do_global_dtors_aux+0x38>
 749:	48 83 3d a7 08 20 00 	cmp    QWORD PTR [rip+0x2008a7],0x0        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 750:	00 
 751:	55                   	push   rbp
 752:	48 89 e5             	mov    rbp,rsp
 755:	74 0c                	je     763 <__do_global_dtors_aux+0x23>
 757:	48 8b 3d aa 08 20 00 	mov    rdi,QWORD PTR [rip+0x2008aa]        # 201008 <__dso_handle>
 75e:	e8 0d ff ff ff       	call   670 <__cxa_finalize@plt>
 763:	e8 48 ff ff ff       	call   6b0 <deregister_tm_clones>
 768:	c6 05 f1 13 20 00 01 	mov    BYTE PTR [rip+0x2013f1],0x1        # 201b60 <completed.7697>
 76f:	5d                   	pop    rbp
 770:	c3                   	ret    
 771:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
 778:	f3 c3                	repz ret 
 77a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000000780 <frame_dummy>:
 780:	55                   	push   rbp
 781:	48 89 e5             	mov    rbp,rsp
 784:	5d                   	pop    rbp
 785:	e9 66 ff ff ff       	jmp    6f0 <register_tm_clones>

000000000000078a <f>:
 78a:	55                   	push   rbp
 78b:	48 89 e5             	mov    rbp,rsp
 78e:	48 83 ec 20          	sub    rsp,0x20
 792:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
 795:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
 799:	75 07                	jne    7a2 <f+0x18>
 79b:	b8 00 00 00 00       	mov    eax,0x0
 7a0:	eb 46                	jmp    7e8 <f+0x5e>
 7a2:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
 7a6:	79 03                	jns    7ab <f+0x21>
 7a8:	f7 5d ec             	neg    DWORD PTR [rbp-0x14]
 7ab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 7ae:	d1 f8                	sar    eax,1
 7b0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
 7b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 7b6:	83 e0 01             	and    eax,0x1
 7b9:	85 c0                	test   eax,eax
 7bb:	74 1e                	je     7db <f+0x51>
 7bd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 7c0:	89 c7                	mov    edi,eax
 7c2:	e8 c3 ff ff ff       	call   78a <f>
 7c7:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
 7ce:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 7d1:	c1 e0 02             	shl    eax,0x2
 7d4:	01 d0                	add    eax,edx
 7d6:	83 c0 01             	add    eax,0x1
 7d9:	eb 0d                	jmp    7e8 <f+0x5e>
 7db:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
 7de:	89 c7                	mov    edi,eax
 7e0:	e8 a5 ff ff ff       	call   78a <f>
 7e5:	c1 e0 02             	shl    eax,0x2
 7e8:	c9                   	leave  
 7e9:	c3                   	ret    

00000000000007ea <handler>:
 7ea:	55                   	push   rbp
 7eb:	48 89 e5             	mov    rbp,rsp
 7ee:	48 83 ec 10          	sub    rsp,0x10
 7f2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
 7f5:	c7 05 4d 13 20 00 00 	mov    DWORD PTR [rip+0x20134d],0x0        # 201b4c <traced>
 7fc:	00 00 00 
 7ff:	be 00 00 00 00       	mov    esi,0x0
 804:	bf 05 00 00 00       	mov    edi,0x5
 809:	e8 42 fe ff ff       	call   650 <signal@plt>
 80e:	48 8d 3d 4f 01 00 00 	lea    rdi,[rip+0x14f]        # 964 <_IO_stdin_used+0x4>
 815:	e8 16 fe ff ff       	call   630 <puts@plt>
 81a:	bf 00 00 00 00       	mov    edi,0x0
 81f:	e8 3c fe ff ff       	call   660 <exit@plt>

0000000000000824 <main>:
 824:	55                   	push   rbp
 825:	48 89 e5             	mov    rbp,rsp
 828:	48 83 ec 70          	sub    rsp,0x70
 82c:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
 82f:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
 833:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 83a:	00 00 
 83c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
 840:	31 c0                	xor    eax,eax
 842:	48 8d 35 a1 ff ff ff 	lea    rsi,[rip+0xffffffffffffffa1]        # 7ea <handler>
 849:	bf 05 00 00 00       	mov    edi,0x5
 84e:	e8 fd fd ff ff       	call   650 <signal@plt>
 853:	bf 05 00 00 00       	mov    edi,0x5
 858:	e8 c3 fd ff ff       	call   620 <raise@plt>
 85d:	48 8d 3d 12 01 00 00 	lea    rdi,[rip+0x112]        # 976 <_IO_stdin_used+0x16>
 864:	e8 c7 fd ff ff       	call   630 <puts@plt>
 869:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
 870:	eb 33                	jmp    8a5 <main+0x81>
 872:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
 875:	89 c7                	mov    edi,eax
 877:	e8 0e ff ff ff       	call   78a <f>
 87c:	05 39 05 00 00       	add    eax,0x539
 881:	48 63 d0             	movsxd rdx,eax
 884:	48 8d 05 95 07 20 00 	lea    rax,[rip+0x200795]        # 201020 <data>
 88b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
 88f:	89 c1                	mov    ecx,eax
 891:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
 894:	48 63 d0             	movsxd rdx,eax
 897:	48 8d 05 e2 12 20 00 	lea    rax,[rip+0x2012e2]        # 201b80 <output>
 89e:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
 8a1:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
 8a5:	83 7d ac 24          	cmp    DWORD PTR [rbp-0x54],0x24
 8a9:	7e c7                	jle    872 <main+0x4e>
 8ab:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
 8ae:	48 63 d0             	movsxd rdx,eax
 8b1:	48 8d 05 c8 12 20 00 	lea    rax,[rip+0x2012c8]        # 201b80 <output>
 8b8:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
 8bc:	b8 00 00 00 00       	mov    eax,0x0
 8c1:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
 8c5:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 8cc:	00 00 
 8ce:	74 05                	je     8d5 <main+0xb1>
 8d0:	e8 6b fd ff ff       	call   640 <__stack_chk_fail@plt>
 8d5:	c9                   	leave  
 8d6:	c3                   	ret    
 8d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 8de:	00 00 

00000000000008e0 <__libc_csu_init>:
 8e0:	41 57                	push   r15
 8e2:	41 56                	push   r14
 8e4:	49 89 d7             	mov    r15,rdx
 8e7:	41 55                	push   r13
 8e9:	41 54                	push   r12
 8eb:	4c 8d 25 a6 04 20 00 	lea    r12,[rip+0x2004a6]        # 200d98 <__frame_dummy_init_array_entry>
 8f2:	55                   	push   rbp
 8f3:	48 8d 2d a6 04 20 00 	lea    rbp,[rip+0x2004a6]        # 200da0 <__do_global_dtors_aux_fini_array_entry>
 8fa:	53                   	push   rbx
 8fb:	41 89 fd             	mov    r13d,edi
 8fe:	49 89 f6             	mov    r14,rsi
 901:	4c 29 e5             	sub    rbp,r12
 904:	48 83 ec 08          	sub    rsp,0x8
 908:	48 c1 fd 03          	sar    rbp,0x3
 90c:	e8 df fc ff ff       	call   5f0 <_init>
 911:	48 85 ed             	test   rbp,rbp
 914:	74 20                	je     936 <__libc_csu_init+0x56>
 916:	31 db                	xor    ebx,ebx
 918:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 91f:	00 
 920:	4c 89 fa             	mov    rdx,r15
 923:	4c 89 f6             	mov    rsi,r14
 926:	44 89 ef             	mov    edi,r13d
 929:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
 92d:	48 83 c3 01          	add    rbx,0x1
 931:	48 39 dd             	cmp    rbp,rbx
 934:	75 ea                	jne    920 <__libc_csu_init+0x40>
 936:	48 83 c4 08          	add    rsp,0x8
 93a:	5b                   	pop    rbx
 93b:	5d                   	pop    rbp
 93c:	41 5c                	pop    r12
 93e:	41 5d                	pop    r13
 940:	41 5e                	pop    r14
 942:	41 5f                	pop    r15
 944:	c3                   	ret    
 945:	90                   	nop
 946:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 94d:	00 00 00 

0000000000000950 <__libc_csu_fini>:
 950:	f3 c3                	repz ret 

.fini 區段的反組譯：

0000000000000954 <_fini>:
 954:	48 83 ec 08          	sub    rsp,0x8
 958:	48 83 c4 08          	add    rsp,0x8
 95c:	c3                   	ret    
